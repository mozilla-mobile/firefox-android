// Top-level build file where you can add configuration options common to all sub-projects/modules.

import org.mozilla.fenix.gradle.tasks.GithubDetailsTask

import java.nio.file.CopyOption
import java.nio.file.Files
import java.nio.file.Paths
import java.nio.file.StandardCopyOption

buildscript {
    // This logic is duplicated in the allprojects block: I don't know how to fix that.
    repositories {
        maven {
            name "Mozilla Nightly"
            url "https://nightly.maven.mozilla.org/maven2"
            content {
                // Improve performance: only check moz maven for mozilla deps.
                includeGroupByRegex RepoMatching.mozilla
            }
        }

        maven {
            name "Mozilla"
            url "https://maven.mozilla.org/maven2"
            content {
                // Improve performance: only check moz maven for mozilla deps.
                includeGroupByRegex RepoMatching.mozilla
            }
        }

        if (ExtraRepositories.mozillaStaging) {
            maven {
                name "Mozilla Staging"
                url "https://maven-default.stage.mozaws.net/maven2"
                content {
                    // Improve performance: only check moz maven for mozilla deps.
                    includeGroupByRegex RepoMatching.mozilla
                }
            }
        }

        if (project.hasProperty("googleRepo")) {
            maven {
                name "Google"
                allowInsecureProtocol true // Local Nexus in CI uses HTTP
                url project.property("googleRepo")
            }
        } else {
            google() {
                content {
                    // Improve performance: only check google maven for google deps.
                    includeGroupByRegex RepoMatching.androidx
                    includeGroupByRegex RepoMatching.comAndroid
                    includeGroupByRegex RepoMatching.comGoogle
                }
            }
        }

        if (project.hasProperty("centralRepo")) {
            maven {
                name "MavenCentral"
                url project.property("centralRepo")
                allowInsecureProtocol true // Local Nexus in CI uses HTTP
            }
        } else {
            mavenCentral() {
                content {
                    // Improve security: don't search deps with known repos.
                    excludeGroupByRegex RepoMatching.mozilla
                    excludeGroupByRegex RepoMatching.androidx
                    excludeGroupByRegex RepoMatching.comAndroid
                }
            }
        }
    }

    dependencies {
        classpath FenixDependencies.tools_androidgradle
        classpath FenixDependencies.tools_kotlingradle
        classpath FenixDependencies.tools_benchmarkgradle
        classpath FenixDependencies.androidx_safeargs
        classpath FenixDependencies.osslicenses_plugin
        classpath "org.mozilla.telemetry:glean-gradle-plugin:${Versions.mozilla_glean}"
        classpath "${ApplicationServicesConfig.groupId}:tooling-nimbus-gradle:${ApplicationServicesConfig.version}"

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }

    // Variables in plugins {} aren't directly supported. Hack around it by setting an
    // intermediate variable which can pull from FenixDependencies.kt and be used later.
    ext {
        detekt_plugin = FenixVersions.detekt
        protobuf_plugin = FenixVersions.protobuf_plugin
        python_envs_plugin = FenixVersions.python_envs_plugin
    }
}

plugins {
    id("io.gitlab.arturbosch.detekt").version("$detekt_plugin")
}

allprojects {
    // This logic is duplicated in the buildscript block: I don't know how to fix that.
    repositories {
        maven {
            name "Mozilla Nightly"
            url "https://nightly.maven.mozilla.org/maven2"
            content {
                // Improve performance: only check moz maven for mozilla deps.
                includeGroupByRegex RepoMatching.mozilla
            }
        }

        maven {
            name "Mozilla"
            url "https://maven.mozilla.org/maven2"
            content {
                // Improve performance: only check moz maven for mozilla deps.
                includeGroupByRegex RepoMatching.mozilla
            }
        }

        if (ExtraRepositories.mozillaStaging) {
            maven {
                name "Mozilla Staging"
                url "https://maven-default.stage.mozaws.net/maven2"
                content {
                    // Improve performance: only check moz maven for mozilla deps.
                    includeGroupByRegex RepoMatching.mozilla
                }
            }
        }

        if (project.hasProperty("googleRepo")) {
            maven {
                name "Google"
                url project.property("googleRepo")
                allowInsecureProtocol true // Local Nexus in CI uses HTTP
            }
        } else {
            google() {
                content {
                    // Improve performance: only check google maven for google deps.
                    includeGroupByRegex RepoMatching.androidx
                    includeGroupByRegex RepoMatching.comAndroid
                    includeGroupByRegex RepoMatching.comGoogle
                }
            }
        }

        if (project.hasProperty("centralRepo")) {
            maven {
                name "MavenCentral"
                url project.property("centralRepo")
                allowInsecureProtocol true // Local Nexus in CI uses HTTP
            }
        } else {
            mavenCentral() {
                content {
                    // Improve security: don't search deps with known repos.
                    excludeGroupByRegex RepoMatching.mozilla
                    excludeGroupByRegex RepoMatching.androidx
                    excludeGroupByRegex RepoMatching.comAndroid
                }
            }
        }
    }

    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
        kotlinOptions.jvmTarget = "11"
        kotlinOptions.allWarningsAsErrors = true
        kotlinOptions.freeCompilerArgs += [
            "-opt-in=kotlin.RequiresOptIn", "-Xjvm-default=all"
        ]
    }
}

tasks.register('clean', Delete) {
    delete rootProject.buildDir
}

detekt {
    input = files("$projectDir/app/src")
    config = files("$projectDir/config/detekt.yml")

    reports {
        html {
            enabled = true
            destination = file("$projectDir/build/reports/detekt.html")
        }
        xml {
            enabled = false
        }
        txt {
            enabled = false
        }
    }
}

tasks.withType(io.gitlab.arturbosch.detekt.Detekt).configureEach() {
    autoCorrect = true

    exclude "**/test/**"
    exclude "**/androidTest/**"
    exclude "**/build/**"
    exclude "**/resources/**"
    exclude "**/tmp/**"
}

// Apply same path exclusions as for the main task
tasks.withType(io.gitlab.arturbosch.detekt.DetektCreateBaselineTask).configureEach() {
    exclude "**/test/**"
    exclude "**/androidTest/**"
    exclude "**/build/**"
    exclude "**/resources/**"
    exclude "**/tmp/**"
}

configurations {
    ktlint
}

dependencies {
    ktlint("com.pinterest:ktlint:${FenixVersions.ktlint}") {
        attributes {
            attribute(Bundling.BUNDLING_ATTRIBUTE, getObjects().named(Bundling, Bundling.EXTERNAL))
        }
    }

    detekt project(":mozilla-detekt-rules")
    detekt "io.gitlab.arturbosch.detekt:detekt-cli:${FenixVersions.detekt}"
}

tasks.register('ktlint', JavaExec) {
    group = "verification"
    description = "Check Kotlin code style."
    classpath = configurations.ktlint
    main = "com.pinterest.ktlint.Main"
    args "app/src/**/*.kt", "!**/build/**/*.kt", "--baseline=ktlint-baseline.xml"
}

task ktlintFormat(type: JavaExec, group: "formatting") {
    description = "Fix Kotlin code style deviations."
    classpath = configurations.ktlint
    mainClass.set("com.pinterest.ktlint.Main")
    args "-F", "app/src/**/*.kt", "!**/build/**/*.kt", "--baseline=ktlint-baseline.xml"
}

tasks.withType(io.gitlab.arturbosch.detekt.Detekt.class).configureEach {
    exclude("**/resources/**")
    exclude("**/tmp/**")
}

tasks.register("listRepositories") {
    doLast {
        println "Repositories:"
        project.repositories.each { println "Name: " + it.name + "; url: " + it.url }
    }
}

tasks.register("githubTestDetails", GithubDetailsTask) {
    text = "### [Unit Test Results Fenix]({reportsUrl}/test/testFenixDebugUnitTest/index.html)"
}

tasks.register("githubLintDetektDetails", GithubDetailsTask) {
    text = "### [Detekt Results Fenix]({reportsUrl}/detekt.html)"
}

tasks.register("githubLintAndroidDetails", GithubDetailsTask) {
    text = "### [Android Lint Results Fenix]({reportsUrl}/lint-results-debug.html)"
}

// Task to copy generated baseline profile to the app module
// to be used in the nightly release pipeline only.
tasks.register("copyBaselineProfile", DefaultTask) {
    doLast {
        File profileFile = fileTree('benchmark/build/outputs') {
            include '**/*baseline-prof.txt'
        }.getSingleFile()
        def destinationPath = Paths.get("app", "src", "main", "baseline-prof.txt")
        Files.copy(profileFile.toPath(), destinationPath, StandardCopyOption.REPLACE_EXISTING)
    }
}

def gmd = "dev31_default_x86_64_Pixel_3"
def emulator = "pixel5_api31"
def system_image = "system-images';'android-31';'google_apis';'x86_64"

// Task to generate baseline profile for fenix on the defined gradle managed device.
tasks.register('generateBaselineProfileAlt', DefaultTask) {
    doLast {
        exec {
            commandLine 'sh', '-c', "./gradlew :benchmark:pixel3Api31BenchmarkAndroidTest -Pandroid.testoptions.manageddevices.emulator.gpu=swiftshader_indirect -P android.testInstrumentationRunnerArguments.class=org.mozilla.fenix.benchmark.baselineprofile.StartupOnlyBaselineProfileGenerator -P baselineProfileGeneration"
        }
    }
}

// Task to generate baseline profile for fenix on the defined gradle managed device.
tasks.register('generateBaselineProfile', DefaultTask) {
    doLast {
        def sdkRoot = System.getenv('ANDROID_SDK_ROOT')
        exec {
            commandLine 'sh', '-c', """
                ${sdkRoot}/emulator/emulator -avd ${emulator} -no-accel -no-snapstorage -no-snapshot -no-window -no-audio & 
                (adb wait-for-device && ./gradlew :benchmark:connectedBenchmarkAndroidTest -P android.testInstrumentationRunnerArguments.class=org.mozilla.fenix.benchmark.baselineprofile.StartupOnlyBaselineProfileGenerator -P baselineProfileGeneration && adb emu kill)
            """
        }
    }
}

// Task to setup the emulator
tasks.register("setupEmulator", DefaultTask) {
    doLast {
        def sdkRoot = System.getenv('ANDROID_SDK_ROOT')
        exec {
            commandLine 'sh', '-c', """
                $sdkRoot/cmdline-tools/latest/bin/sdkmanager --install ${system_image} &&
                $sdkRoot/cmdline-tools/latest/bin/sdkmanager "platforms;android-31" "platform-tools" &&
                $sdkRoot/cmdline-tools/latest/bin/avdmanager create avd --force --name ${emulator} --package ${system_image} --device "pixel_5" -c 2000M
            """
        }
    }
}

// Task to setup the gradle managed device and copy the emulator to the parent directory so
// it can be ran using command line emulator tool.
tasks.register("setupGradleManagedDevice", DefaultTask) {
    doLast {
        def home = System.getProperty('user.home')
        def sourceDirectory = "${home}/.android/avd/gradle-managed"
        def targetDirectory = "${home}/.android/avd"
        def iniFilePath = "${targetDirectory}/${gmd}.ini"

        exec {
            commandLine 'sh', '-c', """
                ./gradlew :benchmark:pixel3Api31Setup &&
                cp -R ${sourceDirectory}/${gmd}.avd ${targetDirectory} &&
                cp ${sourceDirectory}/${gmd}.ini ${targetDirectory} &&
                sed -i '' "s|/gradle-managed||g" ${iniFilePath}
            """
        }
    }
}
