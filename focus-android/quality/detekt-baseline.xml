<?xml version="1.0" ?>
<SmellBaseline>
  <ManuallySuppressedIssues></ManuallySuppressedIssues>
  <CurrentIssues>
    <ID>CollapsibleIfStatements:MainActivity.kt$MainActivity$if (!isTaskRoot) { if (intent.hasCategory(Intent.CATEGORY_LAUNCHER) &amp;&amp; Intent.ACTION_MAIN == intent.action) { finish() return } }</ID>
    <ID>CollapsibleIfStatements:UrlInputFragment.kt$UrlInputFragment.&lt;no name provided&gt;$if (reverse) { if (isOverlay) { dismiss() } }</ID>
    <ID>ConstructorParameterNaming:FocusNimbus.kt$CookieBanner$_variables: Variables = NullVariables.instance</ID>
    <ID>ConstructorParameterNaming:FocusNimbus.kt$CookieBanner$private val _defaults: Defaults</ID>
    <ID>ConstructorParameterNaming:FocusNimbus.kt$CookieBanner$private val _variables: Variables</ID>
    <ID>ConstructorParameterNaming:FocusNimbus.kt$Onboarding$_variables: Variables = NullVariables.instance</ID>
    <ID>ConstructorParameterNaming:FocusNimbus.kt$Onboarding$private val _defaults: Defaults</ID>
    <ID>ConstructorParameterNaming:FocusNimbus.kt$Onboarding$private val _variables: Variables</ID>
    <ID>EmptyFunctionBlock:AutocompleteListFragment.kt$AutocompleteListFragment.&lt;no name provided&gt;${}</ID>
    <ID>EmptyFunctionBlock:BiometricAuthenticationFragmentTest.kt$BiometricAuthenticationFragmentTest.&lt;no name provided&gt;${ }</ID>
    <ID>EmptyFunctionBlock:ExceptionsListFragment.kt$ExceptionsListFragment.&lt;no name provided&gt;${}</ID>
    <ID>EmptyFunctionBlock:FirstrunFragment.kt$FirstrunFragment.&lt;no name provided&gt;${}</ID>
    <ID>FunctionOnlyReturningConstant:ExternalIntentNavigationTest.kt$ShadowPerformance$@Implementation @Suppress("Unused_Parameter") fun processIntentIfPerformanceTest(bundle: Bundle?, context: Context)</ID>
    <ID>LongParameterList:FullScreenIntegration.kt$FullScreenIntegration$( val activity: Activity, val store: BrowserStore, tabId: String?, sessionUseCases: SessionUseCases, private val settings: Settings, private val toolbarView: BrowserToolbar, private val statusBar: View, private val engineView: EngineView, )</ID>
    <ID>MatchingDeclarationName:SettingsSearchMenuRobot.kt$SearchSettingsRobot</ID>
    <ID>MaxLineLength:BiometricAuthenticationFragmentTest.kt$BiometricAuthenticationFragmentTest$fun</ID>
    <ID>MaxLineLength:BrowserRobot.kt$BrowserRobot$fun verifyOpenLinksInAppsPrompt(openLinksInAppsEnabled: Boolean, link: String)</ID>
    <ID>MaxLineLength:BrowserRobot.kt$BrowserRobot.Transition$fun</ID>
    <ID>MaxLineLength:BrowserToolbarIntegrationTest.kt$BrowserToolbarIntegrationTest$fun</ID>
    <ID>MaxLineLength:BrowserToolbarTest.kt$BrowserToolbarTest$assertTrue((engineView.layoutParams as? CoordinatorLayout.LayoutParams)?.behavior is EngineViewBrowserToolbarBehavior)</ID>
    <ID>MaxLineLength:CfrMiddlewareTest.kt$CfrMiddlewareTest$fun</ID>
    <ID>MaxLineLength:ExternalIntentNavigationTest.kt$ExternalIntentNavigationTest$fun</ID>
    <ID>MaxLineLength:FocusNimbus.kt$Onboarding$_defaults = Defaults(isCfrEnabled = isCfrEnabled, isEnabled = isEnabled, isPromoteSearchWidgetDialogEnabled = isPromoteSearchWidgetDialogEnabled )</ID>
    <ID>MaxLineLength:HomeScreenScreenshots.kt$HomeScreenScreenshots$TestHelper.mDevice.findObject(UiSelector().resourceId("${TestHelper.packageName}:id/mozac_browser_toolbar_edit_url_view"))</ID>
    <ID>MaxLineLength:HomeScreenScreenshots.kt$HomeScreenScreenshots$TestHelper.mDevice.findObject(UiSelector().resourceId("${TestHelper.packageName}:id/mozac_browser_toolbar_menu"))</ID>
    <ID>MaxLineLength:HomeScreenScreenshots.kt$HomeScreenScreenshots$private</ID>
    <ID>MaxLineLength:IntentUtilsTest.kt$IntentUtilsTest$fun</ID>
    <ID>MaxLineLength:MainActivityTestRule.kt$MainActivityIntentsTestRule$open</ID>
    <ID>MaxLineLength:MobileMetricsPingStorageTest.kt$MobileMetricsPingStorageTest$private val file = File("${(ApplicationProvider.getApplicationContext() as FocusApplication).cacheDir}/${MobileMetricsPingStorage.STORAGE_FOLDER}/${MobileMetricsPingStorage.FILE_NAME}")</ID>
    <ID>MaxLineLength:OnboardingStorageTest.kt$OnboardingStorageTest$assertEquals(testContext.getString(OnboardingStep.ON_BOARDING_FIRST_SCREEN.prefId), prefManager.getString(testContext.getString(R.string.pref_key_onboarding_step), ""))</ID>
    <ID>MaxLineLength:OnboardingStorageTest.kt$OnboardingStorageTest$assertEquals(testContext.getString(OnboardingStep.ON_BOARDING_SECOND_SCREEN.prefId), prefManager.getString(testContext.getString(R.string.pref_key_onboarding_step), ""))</ID>
    <ID>MaxLineLength:OnboardingStorageTest.kt$OnboardingStorageTest$fun</ID>
    <ID>MaxLineLength:SearchRobot.kt$private val clearSearchButton = mDevice.findObject(UiSelector().resourceId("$packageName:id/mozac_browser_toolbar_clear_view"))</ID>
    <ID>MaxLineLength:SearchWidgetProviderTest.kt$SearchWidgetProviderTest$fun</ID>
    <ID>MaxLineLength:SettingsPrivacyMenuRobot.kt$.</ID>
    <ID>MaxLineLength:SettingsPrivacyMenuRobot.kt$SettingsPrivacyMenuRobot.Transition$fun</ID>
    <ID>MaxLineLength:SitePermissionOptionsStorageTest.kt$SitePermissionOptionsStorageTest$fun</ID>
    <ID>MaxLineLength:SitePermissionOptionsStoreTest.kt$SitePermissionOptionsStoreTest$doReturn(listOf(SitePermissionOption.AskToAllow(), SitePermissionOption.Blocked())).`when`(storage).getSitePermissionOptions(SitePermission.CAMERA)</ID>
    <ID>MaxLineLength:SitePermissionOptionsStoreTest.kt$SitePermissionOptionsStoreTest$doReturn(testContext.getString(R.string.preference_phone_feature_camera)).`when`(storage).getSitePermissionLabel(SitePermission.CAMERA)</ID>
    <ID>MaxLineLength:SitePermissionOptionsStoreTest.kt$SitePermissionOptionsStoreTest$fun</ID>
    <ID>MaxLineLength:SitePermissionOptionsStoreTest.kt$SitePermissionOptionsStoreTest$verify(storage).saveCurrentSitePermissionOptionInSharePref(SitePermissionOption.Blocked(), SitePermission.CAMERA)</ID>
    <ID>MaxLineLength:SitePermissionsFragmentTest.kt$SitePermissionsFragmentTest$fun</ID>
    <ID>MaxLineLength:StartupPathProviderTest.kt$StartupPathProviderTest$fun</ID>
    <ID>MaxLineLength:StartupStateProviderTest.kt$StartupStateProviderTest$fun</ID>
    <ID>MaxLineLength:StartupTypeTelemetryTest.kt$StartupTypeTelemetryTest$fun</ID>
    <ID>MaxLineLength:StringTest.kt$StringTest$"http://amazon.com/Mockingjay-Hunger-Games-Suzanne-Collins/dp/0545663261/ref=pd_sim_14_2?_encoding=UTF8&amp;psc=1&amp;refRID=90ZHE3V976TKBGDR9VAM"</ID>
    <ID>MaxLineLength:StringTest.kt$StringTest$"https://www.nytimes.com/2017/08/30/world/europe/princess-diana-death-anniversary.html?hp&amp;action=click&amp;pgtype=Homepage&amp;clickSource=story-heading&amp;module=second-column-region&amp;region=top-news&amp;WT.nav=top-news"</ID>
    <ID>MaxLineLength:StringTest.kt$StringTest$"https://www.wsj.com/articles/mexican-presidential-candidate-calls-for-nafta-talks-to-be-suspended-1504137175"</ID>
    <ID>MaxLineLength:UriTest.kt$UriTest$assertTruncatedHost("yahoo.com", "https://de.search.yahoo.com/search?p=mozilla&amp;fr=yfp-t&amp;fp=1&amp;toggle=1&amp;cop=mss&amp;ei=UTF-8")</ID>
    <ID>MayBeConst:CrashReporterFragment.kt$CrashReporterFragment.Companion$val FRAGMENT_TAG = "crash-reporter"</ID>
    <ID>MayBeConst:IconGenerator.kt$IconGenerator.Companion$private val DEFAULT_ICON_CHAR = '?'</ID>
    <ID>MayBeConst:IconGenerator.kt$IconGenerator.Companion$private val TEXT_SIZE_DP = 36f</ID>
    <ID>MayBeConst:ManualAddSearchEnginePreference.kt$ManualAddSearchEnginePreference.Companion$private val SEARCH_ENGINE_NAME_KEY = "search-engine-name"</ID>
    <ID>MayBeConst:ManualAddSearchEnginePreference.kt$ManualAddSearchEnginePreference.Companion$private val SEARCH_QUERY_KEY = "search-query"</ID>
    <ID>MayBeConst:ManualAddSearchEnginePreference.kt$ManualAddSearchEnginePreference.Companion$private val SUPER_STATE_KEY = "super-state"</ID>
    <ID>PrintStackTrace:TestHelper.kt$TestHelper$e</ID>
    <ID>SpacingBetweenPackageAndImports:FocusNimbus.kt$ </ID>
    <ID>UndocumentedPublicClass:AboutFragment.kt$AboutFragment : BaseSettingsLikeFragment</ID>
    <ID>UndocumentedPublicClass:AdvancedSettingsFragment.kt$AdvancedSettingsFragment : BaseSettingsFragmentOnSharedPreferenceChangeListener</ID>
    <ID>UndocumentedPublicClass:AppAction.kt$AppAction$NavigateUp : AppAction</ID>
    <ID>UndocumentedPublicClass:AppAction.kt$AppAction$OpenSettings : AppAction</ID>
    <ID>UndocumentedPublicClass:AppAction.kt$AppAction$OpenSitePermissionOptionsScreen : AppAction</ID>
    <ID>UndocumentedPublicClass:AppConstants.kt$AppConstants</ID>
    <ID>UndocumentedPublicClass:AppContentInterceptor.kt$AppContentInterceptor : RequestInterceptor</ID>
    <ID>UndocumentedPublicClass:AppReviewStep.kt$AppReviewStep</ID>
    <ID>UndocumentedPublicClass:AppReviewUtils.kt$AppReviewUtils</ID>
    <ID>UndocumentedPublicClass:AppStartReasonProvider.kt$AppStartReasonProvider$StartReason</ID>
    <ID>UndocumentedPublicClass:AppState.kt$Screen$Settings : Screen</ID>
    <ID>UndocumentedPublicClass:AppState.kt$Screen$SitePermissionOptionsScreen : Screen</ID>
    <ID>UndocumentedPublicClass:AppState.kt$Screen.Settings$Page</ID>
    <ID>UndocumentedPublicClass:AutocompleteDomainFormatter.kt$AutocompleteDomainFormatter</ID>
    <ID>UndocumentedPublicClass:AutocompleteRemoveFragment.kt$AutocompleteRemoveFragment : AutocompleteListFragmentCoroutineScope</ID>
    <ID>UndocumentedPublicClass:BaseFragment.kt$BaseFragment : Fragment</ID>
    <ID>UndocumentedPublicClass:BaseSettingsFragment.kt$BaseSettingsFragment : PreferenceFragmentCompatMenuProvider</ID>
    <ID>UndocumentedPublicClass:BiometricAuthenticationFragment.kt$BiometricAuthenticationFragment : BaseFragmentAuthenticationDelegate</ID>
    <ID>UndocumentedPublicClass:BrowserMenuController.kt$BrowserMenuController</ID>
    <ID>UndocumentedPublicClass:BrowserToolbarIntegration.kt$BrowserToolbarIntegration : LifecycleAwareFeature</ID>
    <ID>UndocumentedPublicClass:Config.kt$Config</ID>
    <ID>UndocumentedPublicClass:ConnectionDetailsPanel.kt$ConnectionDetailsPanel : BottomSheetDialog</ID>
    <ID>UndocumentedPublicClass:ContextMenuCandidates.kt$ContextMenuCandidates</ID>
    <ID>UndocumentedPublicClass:CookieBannerExceptionDetailsPanel.kt$CookieBannerExceptionDetailsPanel : BottomSheetDialog</ID>
    <ID>UndocumentedPublicClass:CookieBannerExceptionDetailsSwitch.kt$CookieBannerExceptionDetailsSwitch : ConstraintLayout</ID>
    <ID>UndocumentedPublicClass:CookieBannerExceptionMiddleware.kt$CookieBannerExceptionMiddleware : Middleware</ID>
    <ID>UndocumentedPublicClass:CookieBannerExceptionStore.kt$CookieBannerExceptionAction$InitCookieBannerException : CookieBannerExceptionAction</ID>
    <ID>UndocumentedPublicClass:CookieBannerExceptionStore.kt$CookieBannerExceptionAction$ToggleCookieBannerExceptionException : CookieBannerExceptionAction</ID>
    <ID>UndocumentedPublicClass:CookieBannerExceptionStore.kt$CookieBannerExceptionAction$UpdateCookieBannerExceptionException : CookieBannerExceptionAction</ID>
    <ID>UndocumentedPublicClass:CookieBannerExceptionStore.kt$CookieBannerExceptionAction$UpdateCookieBannerExceptionExceptionVisibility : CookieBannerExceptionAction</ID>
    <ID>UndocumentedPublicClass:CookieBannerExceptionStore.kt$CookieBannerExceptionStore : Store</ID>
    <ID>UndocumentedPublicClass:CookieBannerFragment.kt$CookieBannerFragment : BaseSettingsFragment</ID>
    <ID>UndocumentedPublicClass:CookieBannerOption.kt$CookieBannerOption</ID>
    <ID>UndocumentedPublicClass:CookieBannerOption.kt$CookieBannerOption$CookieBannerDisabled : CookieBannerOption</ID>
    <ID>UndocumentedPublicClass:CookieBannerOption.kt$CookieBannerOption$CookieBannerRejectAll : CookieBannerOption</ID>
    <ID>UndocumentedPublicClass:CookieBannerOption.kt$CookieBannerOption$CookieBannerRejectOrAccept : CookieBannerOption</ID>
    <ID>UndocumentedPublicClass:CookieBannerRejectAllPreference.kt$CookieBannerRejectAllPreference : LearnMoreSwitchPreference</ID>
    <ID>UndocumentedPublicClass:CrashListActivity.kt$CrashListActivity : AbstractCrashListActivity</ID>
    <ID>UndocumentedPublicClass:CrashReporterFragment.kt$CrashReporterFragment : Fragment</ID>
    <ID>UndocumentedPublicClass:CustomTabMenu.kt$CustomTabMenu : ToolbarMenu</ID>
    <ID>UndocumentedPublicClass:CustomTabsService.kt$CustomTabsService : AbstractCustomTabsService</ID>
    <ID>UndocumentedPublicClass:DebugFocusApplication.kt$DebugFocusApplication : FocusApplication</ID>
    <ID>UndocumentedPublicClass:DefaultBrowserPreference.kt$DefaultBrowserPreference : Preference</ID>
    <ID>UndocumentedPublicClass:DefaultCookieBannerExceptionInteractor.kt$DefaultCookieBannerExceptionInteractor</ID>
    <ID>UndocumentedPublicClass:DefaultLanguageScreenInteractor.kt$DefaultLanguageScreenInteractor</ID>
    <ID>UndocumentedPublicClass:DefaultSitePermissionOptionsScreenInteractor.kt$DefaultSitePermissionOptionsScreenInteractor</ID>
    <ID>UndocumentedPublicClass:DownloadService.kt$DownloadService : AbstractFetchDownloadService</ID>
    <ID>UndocumentedPublicClass:EngineProvider.kt$EngineProvider</ID>
    <ID>UndocumentedPublicClass:EngineSharedPreferencesListener.kt$EngineSharedPreferencesListener$ChangeSource</ID>
    <ID>UndocumentedPublicClass:EngineSharedPreferencesListener.kt$EngineSharedPreferencesListener$TrackerChanged</ID>
    <ID>UndocumentedPublicClass:EraseAndOpenShortcutActivity.kt$EraseAndOpenShortcutActivity : Activity</ID>
    <ID>UndocumentedPublicClass:EraseShortcutActivity.kt$EraseShortcutActivity : Activity</ID>
    <ID>UndocumentedPublicClass:ExceptionsRemoveFragment.kt$ExceptionsRemoveFragment : ExceptionsListFragment</ID>
    <ID>UndocumentedPublicClass:FenixProductDetector.kt$FenixProductDetector</ID>
    <ID>UndocumentedPublicClass:FenixProductDetector.kt$FenixProductDetector$FenixVersion</ID>
    <ID>UndocumentedPublicClass:FindInPageIntegration.kt$FindInPageIntegration : LifecycleAwareFeatureUserInteractionHandler</ID>
    <ID>UndocumentedPublicClass:FirstrunCardView.kt$FirstrunCardView : CardView</ID>
    <ID>UndocumentedPublicClass:FirstrunFragment.kt$FirstrunFragment : FragmentOnClickListener</ID>
    <ID>UndocumentedPublicClass:FirstrunPagerAdapter.kt$FirstrunPagerAdapter : PagerAdapter</ID>
    <ID>UndocumentedPublicClass:FocusApplication.kt$FocusApplication : LocaleAwareApplicationProviderCoroutineScope</ID>
    <ID>UndocumentedPublicClass:FocusNimbus.kt$FocusNimbus$Features</ID>
    <ID>UndocumentedPublicClass:FocusSnackbar.kt$FocusSnackbar : BaseTransientBottomBar</ID>
    <ID>UndocumentedPublicClass:FocusSnackbarDelegate.kt$FocusSnackbarDelegate : SnackbarDelegate</ID>
    <ID>UndocumentedPublicClass:FullScreenIntegration.kt$FullScreenIntegration : LifecycleAwareFeatureUserInteractionHandler</ID>
    <ID>UndocumentedPublicClass:GeneralSettingsFragment.kt$GeneralSettingsFragment : BaseSettingsFragment</ID>
    <ID>UndocumentedPublicClass:HardwarePermissionCheckFeature.kt$HardwarePermissionCheckFeature : DefaultLifecycleObserver</ID>
    <ID>UndocumentedPublicClass:HomeMenuItem.kt$HomeMenuItem</ID>
    <ID>UndocumentedPublicClass:HomeMenuItem.kt$HomeMenuItem$Help : HomeMenuItem</ID>
    <ID>UndocumentedPublicClass:HomeMenuItem.kt$HomeMenuItem$Settings : HomeMenuItem</ID>
    <ID>UndocumentedPublicClass:IconGenerator.kt$IconGenerator</ID>
    <ID>UndocumentedPublicClass:InputToolbarIntegration.kt$InputToolbarIntegration : LifecycleAwareFeature</ID>
    <ID>UndocumentedPublicClass:InstalledSearchEnginesSettingsFragment.kt$InstalledSearchEnginesSettingsFragment : BaseSettingsFragment</ID>
    <ID>UndocumentedPublicClass:IntentProcessor.kt$IntentProcessor$Result</ID>
    <ID>UndocumentedPublicClass:IntentProcessor.kt$IntentProcessor.Result$CustomTab : Result</ID>
    <ID>UndocumentedPublicClass:IntentProcessor.kt$IntentProcessor.Result$None : Result</ID>
    <ID>UndocumentedPublicClass:IntentProcessor.kt$IntentProcessor.Result$Tab : Result</ID>
    <ID>UndocumentedPublicClass:IntentUtils.kt$IntentUtils</ID>
    <ID>UndocumentedPublicClass:LanguageFragment.kt$LanguageFragment : BaseComposeFragment</ID>
    <ID>UndocumentedPublicClass:LanguageMiddleware.kt$LanguageMiddleware : Middleware</ID>
    <ID>UndocumentedPublicClass:LanguageScreenStore.kt$LanguageScreenAction$InitLanguages : LanguageScreenAction</ID>
    <ID>UndocumentedPublicClass:LanguageScreenStore.kt$LanguageScreenAction$Select : LanguageScreenAction</ID>
    <ID>UndocumentedPublicClass:LanguageScreenStore.kt$LanguageScreenAction$UpdateLanguages : LanguageScreenAction</ID>
    <ID>UndocumentedPublicClass:LanguageScreenStore.kt$LanguageScreenStore : Store</ID>
    <ID>UndocumentedPublicClass:LanguageStorage.kt$LanguageStorage</ID>
    <ID>UndocumentedPublicClass:LearnMoreSwitchPreference.kt$LearnMoreSwitchPreference : SwitchPreferenceCompat</ID>
    <ID>UndocumentedPublicClass:LocaleDescriptor.kt$LocaleDescriptor : Comparable</ID>
    <ID>UndocumentedPublicClass:LocalizedContent.kt$LocalizedContent</ID>
    <ID>UndocumentedPublicClass:LockObserver.kt$LockObserver : DefaultLifecycleObserver</ID>
    <ID>UndocumentedPublicClass:MainActivity.kt$MainActivity : LocaleAwareAppCompatActivity</ID>
    <ID>UndocumentedPublicClass:MainActivity.kt$MainActivity$AppOpenType</ID>
    <ID>UndocumentedPublicClass:ManualAddSearchEnginePreference.kt$ManualAddSearchEnginePreference : Preference</ID>
    <ID>UndocumentedPublicClass:ManualAddSearchEngineSettingsFragment.kt$ManualAddSearchEngineSettingsFragment : BaseSettingsFragment</ID>
    <ID>UndocumentedPublicClass:ManufacturerCodes.kt$ManufacturerCodes</ID>
    <ID>UndocumentedPublicClass:MobileMetricsPingStorage.kt$MobileMetricsPingStorage</ID>
    <ID>UndocumentedPublicClass:MozillaPreference.kt$MozillaPreference : Preference</ID>
    <ID>UndocumentedPublicClass:MozillaSettingsFragment.kt$MozillaSettingsFragment : BaseSettingsFragment</ID>
    <ID>UndocumentedPublicClass:MultiselectSearchEngineListPreference.kt$MultiselectSearchEngineListPreference : SearchEngineListPreference</ID>
    <ID>UndocumentedPublicClass:NavigationButtonsIntegration.kt$NavigationButtonsIntegration : LifecycleAwareFeature</ID>
    <ID>UndocumentedPublicClass:OnboardingController.kt$DefaultOnboardingController : OnboardingController</ID>
    <ID>UndocumentedPublicClass:OnboardingController.kt$OnboardingController</ID>
    <ID>UndocumentedPublicClass:OnboardingFirstFragment.kt$OnboardingFirstFragment : Fragment</ID>
    <ID>UndocumentedPublicClass:OnboardingInteractor.kt$DefaultOnboardingInteractor : OnboardingInteractor</ID>
    <ID>UndocumentedPublicClass:OnboardingInteractor.kt$OnboardingInteractor</ID>
    <ID>UndocumentedPublicClass:OnboardingSecondFragment.kt$OnboardingSecondFragment : Fragment</ID>
    <ID>UndocumentedPublicClass:OnboardingStep.kt$OnboardingStep</ID>
    <ID>UndocumentedPublicClass:OnboardingStorage.kt$OnboardingStorage</ID>
    <ID>UndocumentedPublicClass:PreferenceSwitch.kt$PreferenceSwitch : SwitchCompat</ID>
    <ID>UndocumentedPublicClass:PreferenceToolTipCompose.kt$PreferenceToolTipCompose : Preference</ID>
    <ID>UndocumentedPublicClass:PrivacySecuritySettingsFragment.kt$PrivacySecuritySettingsFragment : BaseSettingsFragmentOnSharedPreferenceChangeListener</ID>
    <ID>UndocumentedPublicClass:RadioButtonPreference.kt$GroupableRadioButton</ID>
    <ID>UndocumentedPublicClass:RadioButtonPreference.kt$RadioButtonPreference : PreferenceGroupableRadioButton</ID>
    <ID>UndocumentedPublicClass:RadioSearchEngineListPreference.kt$RadioSearchEngineListPreference : SearchEngineListPreferenceOnCheckedChangeListener</ID>
    <ID>UndocumentedPublicClass:RemoveSearchEnginesSettingsFragment.kt$RemoveSearchEnginesSettingsFragment : BaseSettingsFragment</ID>
    <ID>UndocumentedPublicClass:SearchEngineListPreference.kt$SearchEngineListPreference : PreferenceCoroutineScope</ID>
    <ID>UndocumentedPublicClass:SearchSettingsFragment.kt$SearchSettingsFragment : BaseSettingsFragmentOnSharedPreferenceChangeListener</ID>
    <ID>UndocumentedPublicClass:SearchSuggestionsFragment.kt$SearchSuggestionsFragment : FragmentCoroutineScope</ID>
    <ID>UndocumentedPublicClass:SearchSuggestionsPreferences.kt$SearchSuggestionsPreferences</ID>
    <ID>UndocumentedPublicClass:SearchSuggestionsViewModel.kt$SearchSuggestionsViewModel : AndroidViewModel</ID>
    <ID>UndocumentedPublicClass:SearchSuggestionsViewModel.kt$State</ID>
    <ID>UndocumentedPublicClass:SearchSuggestionsViewModel.kt$State$Disabled : State</ID>
    <ID>UndocumentedPublicClass:SearchSuggestionsViewModel.kt$State$NoSuggestionsAPI : State</ID>
    <ID>UndocumentedPublicClass:SearchSuggestionsViewModel.kt$State$ReadyForSuggestions : State</ID>
    <ID>UndocumentedPublicClass:SearchUtils.kt$SearchUtils</ID>
    <ID>UndocumentedPublicClass:SearchWidgetProvider.kt$SearchWidgetProvider : AppSearchWidgetProvider</ID>
    <ID>UndocumentedPublicClass:SearchWidgetUtils.kt$SearchWidgetUtils</ID>
    <ID>UndocumentedPublicClass:SecretSettingsFragment.kt$SecretSettingsFragment : BaseSettingsFragmentOnSharedPreferenceChangeListener</ID>
    <ID>UndocumentedPublicClass:SettingsFragment.kt$SettingsFragment : BaseSettingsFragment</ID>
    <ID>UndocumentedPublicClass:SitePermission.kt$SitePermission : Parcelable</ID>
    <ID>UndocumentedPublicClass:SitePermissionOption.kt$AutoplayOption</ID>
    <ID>UndocumentedPublicClass:SitePermissionOption.kt$AutoplayOption$AllowAudioVideo : SitePermissionOption</ID>
    <ID>UndocumentedPublicClass:SitePermissionOption.kt$AutoplayOption$BlockAudioOnly : SitePermissionOption</ID>
    <ID>UndocumentedPublicClass:SitePermissionOption.kt$AutoplayOption$BlockAudioVideo : SitePermissionOption</ID>
    <ID>UndocumentedPublicClass:SitePermissionOption.kt$SitePermissionOption</ID>
    <ID>UndocumentedPublicClass:SitePermissionOption.kt$SitePermissionOption$Allowed : SitePermissionOption</ID>
    <ID>UndocumentedPublicClass:SitePermissionOption.kt$SitePermissionOption$AskToAllow : SitePermissionOption</ID>
    <ID>UndocumentedPublicClass:SitePermissionOption.kt$SitePermissionOption$Blocked : SitePermissionOption</ID>
    <ID>UndocumentedPublicClass:SitePermissionOptionListItem.kt$SitePermissionOptionListItem</ID>
    <ID>UndocumentedPublicClass:SitePermissionOptionsFragment.kt$SitePermissionOptionsFragment : BaseComposeFragment</ID>
    <ID>UndocumentedPublicClass:SitePermissionOptionsScreenStore.kt$SitePermissionOptionsScreenAction : Action</ID>
    <ID>UndocumentedPublicClass:SitePermissionOptionsScreenStore.kt$SitePermissionOptionsScreenAction$AndroidPermission : SitePermissionOptionsScreenAction</ID>
    <ID>UndocumentedPublicClass:SitePermissionOptionsScreenStore.kt$SitePermissionOptionsScreenAction$InitSitePermissionOptions : SitePermissionOptionsScreenAction</ID>
    <ID>UndocumentedPublicClass:SitePermissionOptionsScreenStore.kt$SitePermissionOptionsScreenAction$Select : SitePermissionOptionsScreenAction</ID>
    <ID>UndocumentedPublicClass:SitePermissionOptionsScreenStore.kt$SitePermissionOptionsScreenAction$UpdateSitePermissionOptions : SitePermissionOptionsScreenAction</ID>
    <ID>UndocumentedPublicClass:SitePermissionOptionsScreenStore.kt$SitePermissionOptionsScreenState : State</ID>
    <ID>UndocumentedPublicClass:SitePermissionOptionsScreenStore.kt$SitePermissionOptionsScreenStore : Store</ID>
    <ID>UndocumentedPublicClass:SitePermissionOptionsStorage.kt$SitePermissionOptionsStorage</ID>
    <ID>UndocumentedPublicClass:SitePermissionOptionsStorageMiddleware.kt$SitePermissionOptionsStorageMiddleware : Middleware</ID>
    <ID>UndocumentedPublicClass:SitePermissionsFragment.kt$SitePermissionsFragment : BaseSettingsFragment</ID>
    <ID>UndocumentedPublicClass:StartupActivityLog.kt$StartupActivityLog$StartupLogActivityLifecycleCallbacks : DefaultActivityLifecycleCallbacks</ID>
    <ID>UndocumentedPublicClass:StartupActivityLog.kt$StartupActivityLog$StartupLogAppLifecycleObserver : DefaultLifecycleObserver</ID>
    <ID>UndocumentedPublicClass:StartupActivityLog.kt$StartupActivityLog.LogEntry$ActivityCreated : LogEntry</ID>
    <ID>UndocumentedPublicClass:StartupActivityLog.kt$StartupActivityLog.LogEntry$ActivityStarted : LogEntry</ID>
    <ID>UndocumentedPublicClass:StartupActivityLog.kt$StartupActivityLog.LogEntry$ActivityStopped : LogEntry</ID>
    <ID>UndocumentedPublicClass:StartupActivityLog.kt$StartupActivityLog.LogEntry$AppStarted : LogEntry</ID>
    <ID>UndocumentedPublicClass:StartupActivityLog.kt$StartupActivityLog.LogEntry$AppStopped : LogEntry</ID>
    <ID>UndocumentedPublicClass:StartupPathProvider.kt$StartupPathProvider$StartupPath</ID>
    <ID>UndocumentedPublicClass:StartupPathProvider.kt$StartupPathProvider$StartupPathLifecycleObserver : DefaultLifecycleObserver</ID>
    <ID>UndocumentedPublicClass:StartupStateProvider.kt$StartupStateProvider$StartupState</ID>
    <ID>UndocumentedPublicClass:StartupTypeTelemetry.kt$StartupTypeTelemetry$StartupTypeLifecycleObserver : DefaultLifecycleObserver</ID>
    <ID>UndocumentedPublicClass:StudiesAdapter.kt$StudiesAdapter : ListAdapter</ID>
    <ID>UndocumentedPublicClass:StudiesAdapter.kt$StudiesAdapter$StudiesDiffCallback : ItemCallback</ID>
    <ID>UndocumentedPublicClass:StudiesFragment.kt$StudiesFragment : BaseSettingsLikeFragment</ID>
    <ID>UndocumentedPublicClass:StudiesListItem.kt$StudiesListItem</ID>
    <ID>UndocumentedPublicClass:StudiesListItem.kt$StudiesListItem$ActiveStudy : StudiesListItem</ID>
    <ID>UndocumentedPublicClass:StudiesListItem.kt$StudiesListItem$Section : StudiesListItem</ID>
    <ID>UndocumentedPublicClass:StudiesRecyclerView.kt$StudiesRecyclerView : RecyclerView</ID>
    <ID>UndocumentedPublicClass:StudiesViewHolder.kt$StudiesViewHolder : ViewHolder</ID>
    <ID>UndocumentedPublicClass:StudiesViewHolder.kt$StudiesViewHolder$ActiveStudiesViewHolder : StudiesViewHolder</ID>
    <ID>UndocumentedPublicClass:StudiesViewHolder.kt$StudiesViewHolder$SectionViewHolder : StudiesViewHolder</ID>
    <ID>UndocumentedPublicClass:StudiesViewModel.kt$StudiesViewModel : AndroidViewModel</ID>
    <ID>UndocumentedPublicClass:SupportUtils.kt$SupportUtils</ID>
    <ID>UndocumentedPublicClass:SupportUtils.kt$SupportUtils$SumoTopic</ID>
    <ID>UndocumentedPublicClass:SwitchWithDescription.kt$SwitchWithDescription : ConstraintLayout</ID>
    <ID>UndocumentedPublicClass:TabViewHolder.kt$TabViewHolder : ViewHolder</ID>
    <ID>UndocumentedPublicClass:TabsPopup.kt$TabsPopup : PopupWindow</ID>
    <ID>UndocumentedPublicClass:TelemetryMiddleware.kt$TelemetryMiddleware : Middleware</ID>
    <ID>UndocumentedPublicClass:TelemetryWrapper.kt$TelemetryWrapper</ID>
    <ID>UndocumentedPublicClass:TelemetryWrapper.kt$TelemetryWrapper$AutoCompleteEventSource</ID>
    <ID>UndocumentedPublicClass:ToolbarMenu.kt$ToolbarMenu</ID>
    <ID>UndocumentedPublicClass:ToolbarMenu.kt$ToolbarMenu$CustomTabItem</ID>
    <ID>UndocumentedPublicClass:ToolbarMenu.kt$ToolbarMenu$Item</ID>
    <ID>UndocumentedPublicClass:ToolbarMenu.kt$ToolbarMenu.CustomTabItem$AddToHomeScreen : Item</ID>
    <ID>UndocumentedPublicClass:ToolbarMenu.kt$ToolbarMenu.CustomTabItem$Back : Item</ID>
    <ID>UndocumentedPublicClass:ToolbarMenu.kt$ToolbarMenu.CustomTabItem$FindInPage : Item</ID>
    <ID>UndocumentedPublicClass:ToolbarMenu.kt$ToolbarMenu.CustomTabItem$Forward : Item</ID>
    <ID>UndocumentedPublicClass:ToolbarMenu.kt$ToolbarMenu.CustomTabItem$OpenInApp : Item</ID>
    <ID>UndocumentedPublicClass:ToolbarMenu.kt$ToolbarMenu.CustomTabItem$OpenInBrowser : Item</ID>
    <ID>UndocumentedPublicClass:ToolbarMenu.kt$ToolbarMenu.CustomTabItem$Reload : Item</ID>
    <ID>UndocumentedPublicClass:ToolbarMenu.kt$ToolbarMenu.CustomTabItem$RequestDesktop : Item</ID>
    <ID>UndocumentedPublicClass:ToolbarMenu.kt$ToolbarMenu.CustomTabItem$Stop : Item</ID>
    <ID>UndocumentedPublicClass:ToolbarMenu.kt$ToolbarMenu.Item$AddToHomeScreen : Item</ID>
    <ID>UndocumentedPublicClass:ToolbarMenu.kt$ToolbarMenu.Item$AddToShortcuts : Item</ID>
    <ID>UndocumentedPublicClass:ToolbarMenu.kt$ToolbarMenu.Item$Back : Item</ID>
    <ID>UndocumentedPublicClass:ToolbarMenu.kt$ToolbarMenu.Item$FindInPage : Item</ID>
    <ID>UndocumentedPublicClass:ToolbarMenu.kt$ToolbarMenu.Item$Forward : Item</ID>
    <ID>UndocumentedPublicClass:ToolbarMenu.kt$ToolbarMenu.Item$OpenInApp : Item</ID>
    <ID>UndocumentedPublicClass:ToolbarMenu.kt$ToolbarMenu.Item$Reload : Item</ID>
    <ID>UndocumentedPublicClass:ToolbarMenu.kt$ToolbarMenu.Item$RemoveFromShortcuts : Item</ID>
    <ID>UndocumentedPublicClass:ToolbarMenu.kt$ToolbarMenu.Item$RequestDesktop : Item</ID>
    <ID>UndocumentedPublicClass:ToolbarMenu.kt$ToolbarMenu.Item$Settings : Item</ID>
    <ID>UndocumentedPublicClass:ToolbarMenu.kt$ToolbarMenu.Item$Share : Item</ID>
    <ID>UndocumentedPublicClass:ToolbarMenu.kt$ToolbarMenu.Item$Stop : Item</ID>
    <ID>UndocumentedPublicClass:TrackingProtectionPanel.kt$TrackingProtectionPanel : BottomSheetDialog</ID>
    <ID>UndocumentedPublicClass:UrlInputFragment.kt$FocusCrashException : Exception</ID>
    <ID>UndocumentedPublicClass:ViewUtils.kt$ViewUtils</ID>
    <ID>UndocumentedPublicClass:VoiceSearchActivity.kt$VoiceSearchActivity : BaseVoiceSearchActivity</ID>
    <ID>UndocumentedPublicClass:WhatsNewStorage.kt$SharedPreferenceWhatsNewStorage : WhatsNewStorage</ID>
    <ID>UndocumentedPublicClass:WhatsNewVersion.kt$ContextWhatsNewVersion : WhatsNewVersion</ID>
    <ID>UndocumentedPublicFunction:AboutFragment.kt$@Composable fun ColumnScope.LearnMoreLink( learnMore: String, openLearnMore: () -&gt; Job, )</ID>
    <ID>UndocumentedPublicFunction:AddToHomescreenDialogFragment.kt$AddToHomescreenDialogFragment.Companion$fun newInstance( url: String, title: String, blockingEnabled: Boolean, requestDesktop: Boolean, ): AddToHomescreenDialogFragment</ID>
    <ID>UndocumentedPublicFunction:AdvancedSettingsFragment.kt$AdvancedSettingsFragment.Companion$fun newInstance(): AdvancedSettingsFragment</ID>
    <ID>UndocumentedPublicFunction:AutocompleteDomainFormatter.kt$AutocompleteDomainFormatter$fun format(url: String): String</ID>
    <ID>UndocumentedPublicFunction:AutocompleteListFragment.kt$AutocompleteListFragment.DomainListAdapter$fun move(from: Int, to: Int)</ID>
    <ID>UndocumentedPublicFunction:AutocompleteListFragment.kt$AutocompleteListFragment.DomainListAdapter$fun refresh(context: Context, body: (() -&gt; Unit)? = null)</ID>
    <ID>UndocumentedPublicFunction:AutocompleteListFragment.kt$AutocompleteListFragment.DomainListAdapter$fun selection(): List&lt;String&gt;</ID>
    <ID>UndocumentedPublicFunction:BaseFragment.kt$BaseFragment$fun cancelAnimation()</ID>
    <ID>UndocumentedPublicFunction:BaseFragment.kt$fun Fragment.requestInPlacePermissions( permissionsToRequest: Array&lt;String&gt;, onResult: (Map&lt;String, Boolean&gt;) -&gt; Unit, )</ID>
    <ID>UndocumentedPublicFunction:BiometricAuthenticationFragment.kt$BiometricAuthenticationFragment.Companion$fun createWithDestinationData(bundle: Bundle? = null): BiometricAuthenticationFragment</ID>
    <ID>UndocumentedPublicFunction:BiometricAuthenticationFragmentCompose.kt$@Composable fun BiometricPromptContent(biometricErrorText: String, showBiometricPrompt: () -&gt; Unit)</ID>
    <ID>UndocumentedPublicFunction:BrowserFragment.kt$BrowserFragment$fun crashReporterIsVisible(): Boolean</ID>
    <ID>UndocumentedPublicFunction:BrowserFragment.kt$BrowserFragment$fun erase(shouldEraseAllTabs: Boolean = false)</ID>
    <ID>UndocumentedPublicFunction:BrowserFragment.kt$BrowserFragment$fun handleTabCrash(crash: Crash)</ID>
    <ID>UndocumentedPublicFunction:BrowserFragment.kt$BrowserFragment$fun showTrackingProtectionPanel()</ID>
    <ID>UndocumentedPublicFunction:BrowserFragment.kt$BrowserFragment.Companion$fun createForTab(tabId: String): BrowserFragment</ID>
    <ID>UndocumentedPublicFunction:BrowserMenuController.kt$BrowserMenuController$@Suppress("ComplexMethod") fun handleMenuInteraction(item: ToolbarMenu.Item)</ID>
    <ID>UndocumentedPublicFunction:BrowsersCache.kt$BrowsersCache$@Synchronized fun all(context: Context): Browsers</ID>
    <ID>UndocumentedPublicFunction:ClientWrapper.kt$ClientWrapper$@Deprecated("Non-private Client usage should be prevented") fun unwrap(): Client</ID>
    <ID>UndocumentedPublicFunction:ContextMenuCandidates.kt$ContextMenuCandidates$@Suppress("LongParameterList") fun get( context: Context, tabsUseCases: TabsUseCases, contextMenuUseCases: ContextMenuUseCases, appLinksUseCases: AppLinksUseCases, snackBarParentView: View, snackbarDelegate: ContextMenuCandidate.SnackbarDelegate = DefaultSnackbarDelegate(), isCustomTab: Boolean, ): List&lt;ContextMenuCandidate&gt;</ID>
    <ID>UndocumentedPublicFunction:CookiesPreference.kt$CookiesPreference$fun updateSummary()</ID>
    <ID>UndocumentedPublicFunction:CrashReporterFragment.kt$CrashReporterFragment.Companion$fun create()</ID>
    <ID>UndocumentedPublicFunction:DefaultBrowserPreference.kt$DefaultBrowserPreference$fun update()</ID>
    <ID>UndocumentedPublicFunction:DefaultCookieBannerExceptionInteractor.kt$DefaultCookieBannerExceptionInteractor$fun handleToggleCookieBannerException(isCookieBannerHandlingExceptionEnabled: Boolean)</ID>
    <ID>UndocumentedPublicFunction:DefaultLanguageScreenInteractor.kt$DefaultLanguageScreenInteractor$fun handleLanguageSelected(language: Language)</ID>
    <ID>UndocumentedPublicFunction:DefaultSitePermissionOptionsScreenInteractor.kt$DefaultSitePermissionOptionsScreenInteractor$fun handleSitePermissionOptionSelected(sitePermissionOption: SitePermissionOption)</ID>
    <ID>UndocumentedPublicFunction:EngineProvider.kt$EngineProvider$fun createClient(context: Context): Client</ID>
    <ID>UndocumentedPublicFunction:EngineProvider.kt$EngineProvider$fun createCookieBannerStorage(context: Context): GeckoCookieBannersStorage</ID>
    <ID>UndocumentedPublicFunction:EngineProvider.kt$EngineProvider$fun createEngine(context: Context, defaultSettings: DefaultSettings): Engine</ID>
    <ID>UndocumentedPublicFunction:ExceptionsListFragment.kt$ExceptionsListFragment.DomainListAdapter$fun move(from: Int, to: Int)</ID>
    <ID>UndocumentedPublicFunction:ExceptionsListFragment.kt$ExceptionsListFragment.DomainListAdapter$fun refresh(context: Context, body: (() -&gt; Unit)? = null)</ID>
    <ID>UndocumentedPublicFunction:ExceptionsListFragment.kt$ExceptionsListFragment.DomainListAdapter$fun selection(): List&lt;TrackingProtectionException&gt;</ID>
    <ID>UndocumentedPublicFunction:FactsProcessor.kt$FactsProcessor$fun initialize()</ID>
    <ID>UndocumentedPublicFunction:FenixProductDetector.kt$FenixProductDetector$fun getInstalledFenixVersions(context: Context): List&lt;String&gt;</ID>
    <ID>UndocumentedPublicFunction:FenixProductDetector.kt$FenixProductDetector$fun isFenixDefaultBrowser(defaultBrowser: ActivityInfo?): Boolean</ID>
    <ID>UndocumentedPublicFunction:FindInPageIntegration.kt$FindInPageIntegration$fun hide()</ID>
    <ID>UndocumentedPublicFunction:FindInPageIntegration.kt$FindInPageIntegration$fun show(sessionState: SessionState)</ID>
    <ID>UndocumentedPublicFunction:FirstrunFragment.kt$FirstrunFragment.Companion$fun create(): FirstrunFragment</ID>
    <ID>UndocumentedPublicFunction:FirstrunPagerAdapter.kt$FirstrunPagerAdapter$fun getPageAccessibilityDescription(position: Int): String</ID>
    <ID>UndocumentedPublicFunction:FocusApplication.kt$FocusApplication$open fun updateLeakCanaryState(isEnabled: Boolean)</ID>
    <ID>UndocumentedPublicFunction:FocusDialog.kt$@Composable fun FocusDialogSample()</ID>
    <ID>UndocumentedPublicFunction:FocusDialog.kt$@Preview( name = "dark theme", showBackground = true, backgroundColor = 0xFF393473, uiMode = Configuration.UI_MODE_NIGHT_MASK, ) @Composable fun DialogTitlePreviewDark()</ID>
    <ID>UndocumentedPublicFunction:FocusDialog.kt$@Preview( name = "light theme", showBackground = true, backgroundColor = 0xFFFBFBFE, uiMode = Configuration.UI_MODE_NIGHT_NO, ) @Composable fun DialogTitlePreviewLight()</ID>
    <ID>UndocumentedPublicFunction:FocusSnackbar.kt$FocusSnackbar$fun setAction(text: String, action: () -&gt; Unit)</ID>
    <ID>UndocumentedPublicFunction:FocusSnackbar.kt$FocusSnackbar$fun setText(text: String)</ID>
    <ID>UndocumentedPublicFunction:FocusTheme.kt$fun phoneDimensions()</ID>
    <ID>UndocumentedPublicFunction:FocusTheme.kt$fun tabletDimensions()</ID>
    <ID>UndocumentedPublicFunction:HomeMenu.kt$HomeMenu$fun getMenuBuilder(): BrowserMenuBuilder</ID>
    <ID>UndocumentedPublicFunction:IconGenerator.kt$IconGenerator.Companion$/* * This method needs to be separate from generateAdaptiveLauncherIcon so that we can generate * the pre-Oreo icon to display in the Add To Home screen Dialog */ @JvmStatic fun generateLauncherIconPreOreo(context: Context, character: Char): Bitmap</ID>
    <ID>UndocumentedPublicFunction:InstallFirefoxActivity.kt$InstallFirefoxActivity.Companion$fun open(context: Context)</ID>
    <ID>UndocumentedPublicFunction:InstallFirefoxActivity.kt$InstallFirefoxActivity.Companion$fun resolveAppStore(context: Context): ActivityInfo?</ID>
    <ID>UndocumentedPublicFunction:InstalledSearchEnginesSettingsFragment.kt$InstalledSearchEnginesSettingsFragment.Companion$fun newInstance()</ID>
    <ID>UndocumentedPublicFunction:LearnMoreSwitchPreference.kt$LearnMoreSwitchPreference$abstract fun getLearnMoreUrl(): String</ID>
    <ID>UndocumentedPublicFunction:LearnMoreSwitchPreference.kt$LearnMoreSwitchPreference$open fun getDescription(): String?</ID>
    <ID>UndocumentedPublicFunction:LocaleDescriptor.kt$LocaleDescriptor$fun getNativeName(): String?</ID>
    <ID>UndocumentedPublicFunction:LocaleDescriptor.kt$LocaleDescriptor$fun getTag(): String</ID>
    <ID>UndocumentedPublicFunction:LocaleFragmentCompose.kt$@Composable fun LanguageNameAndTagItem( language: Language, isSelected: Boolean, onClick: (String) -&gt; Unit, )</ID>
    <ID>UndocumentedPublicFunction:LocalizedContent.kt$LocalizedContent$fun loadGPL(context: Context): String</ID>
    <ID>UndocumentedPublicFunction:LocalizedContent.kt$LocalizedContent$fun loadLicenses(context: Context): String</ID>
    <ID>UndocumentedPublicFunction:MainActivity.kt$MainActivity$fun customizeStatusBar(backgroundColorId: Int? = null)</ID>
    <ID>UndocumentedPublicFunction:MainActivity.kt$MainActivity$fun getToolbar(): ActionBar</ID>
    <ID>UndocumentedPublicFunction:MainActivity.kt$MainActivity$fun hideStatusBarBackground()</ID>
    <ID>UndocumentedPublicFunction:MainActivityNavigation.kt$MainActivityNavigation$@Suppress("ComplexMethod") fun settings(page: Screen.Settings.Page)</ID>
    <ID>UndocumentedPublicFunction:MainActivityNavigation.kt$MainActivityNavigation$fun showOnBoardingSecondScreen()</ID>
    <ID>UndocumentedPublicFunction:MainActivityNavigation.kt$MainActivityNavigation$fun sitePermissionOptionsFragment(sitePermission: SitePermission)</ID>
    <ID>UndocumentedPublicFunction:ManualAddSearchEnginePreference.kt$ManualAddSearchEnginePreference$fun setProgressViewShown(isShown: Boolean)</ID>
    <ID>UndocumentedPublicFunction:ManualAddSearchEnginePreference.kt$ManualAddSearchEnginePreference$fun setSearchQueryErrorText(err: String)</ID>
    <ID>UndocumentedPublicFunction:ManualAddSearchEnginePreference.kt$ManualAddSearchEnginePreference$fun validateEngineNameAndShowError(engineName: String, existingEngines: List&lt;SearchEngine&gt;): Boolean</ID>
    <ID>UndocumentedPublicFunction:ManualAddSearchEnginePreference.kt$ManualAddSearchEnginePreference$fun validateSearchQueryAndShowError(searchQuery: String): Boolean</ID>
    <ID>UndocumentedPublicFunction:ManualAddSearchEngineSettingsFragment.kt$ManualAddSearchEngineSettingsFragment.Companion$@WorkerThread @JvmStatic fun isValidSearchQueryURL(client: Client, query: String): Boolean</ID>
    <ID>UndocumentedPublicFunction:MobileMetricsPingStorage.kt$MobileMetricsPingStorage$fun clearStorage()</ID>
    <ID>UndocumentedPublicFunction:MobileMetricsPingStorage.kt$MobileMetricsPingStorage$fun load(): JSONObject?</ID>
    <ID>UndocumentedPublicFunction:MobileMetricsPingStorage.kt$MobileMetricsPingStorage$fun save(json: JSONObject)</ID>
    <ID>UndocumentedPublicFunction:MobileMetricsPingStorage.kt$MobileMetricsPingStorage$fun shouldStoreMetrics(): Boolean</ID>
    <ID>UndocumentedPublicFunction:MozillaSettingsFragment.kt$MozillaSettingsFragment.Companion$fun newInstance(): MozillaSettingsFragment</ID>
    <ID>UndocumentedPublicFunction:MultiselectSearchEngineListPreference.kt$MultiselectSearchEngineListPreference$fun atLeastOneEngineChecked(): Boolean</ID>
    <ID>UndocumentedPublicFunction:NimbusSetup.kt$fun getNimbusAppName(): String</ID>
    <ID>UndocumentedPublicFunction:OnboardingController.kt$DefaultOnboardingController$@VisibleForTesting fun navigateToDefaultBrowserAppsSettings()</ID>
    <ID>UndocumentedPublicFunction:OnboardingController.kt$OnboardingController$fun handleActivityResultImplementation(activityResult: ActivityResult)</ID>
    <ID>UndocumentedPublicFunction:OnboardingController.kt$OnboardingController$fun handleFinishOnBoarding()</ID>
    <ID>UndocumentedPublicFunction:OnboardingController.kt$OnboardingController$fun handleGetStartedButtonClicked()</ID>
    <ID>UndocumentedPublicFunction:OnboardingController.kt$OnboardingController$fun handleMakeFocusDefaultBrowserButtonClicked(activityResultLauncher: ActivityResultLauncher&lt;Intent&gt;)</ID>
    <ID>UndocumentedPublicFunction:OnboardingInteractor.kt$OnboardingInteractor$fun onActivityResultImplementation(activityResult: ActivityResult)</ID>
    <ID>UndocumentedPublicFunction:OnboardingInteractor.kt$OnboardingInteractor$fun onFinishOnBoarding()</ID>
    <ID>UndocumentedPublicFunction:OnboardingInteractor.kt$OnboardingInteractor$fun onGetStartedButtonClicked()</ID>
    <ID>UndocumentedPublicFunction:OnboardingInteractor.kt$OnboardingInteractor$fun onMakeFocusDefaultBrowserButtonClicked(activityResultLauncher: ActivityResultLauncher&lt;Intent&gt;)</ID>
    <ID>UndocumentedPublicFunction:Performance.kt$Performance$fun processIntentIfPerformanceTest(bundle: Bundle?, context: Context)</ID>
    <ID>UndocumentedPublicFunction:PreferenceSwitch.kt$PreferenceSwitch$fun onClickListener(listener: () -&gt; Unit)</ID>
    <ID>UndocumentedPublicFunction:PrivacySecuritySettingsFragment.kt$PrivacySecuritySettingsFragment.Companion$fun newInstance(): PrivacySecuritySettingsFragment</ID>
    <ID>UndocumentedPublicFunction:ProfilerMarkerFactProcessor.kt$ProfilerMarkerFactProcessor.Companion$fun create(profilerProvider: () -&gt; Profiler?)</ID>
    <ID>UndocumentedPublicFunction:PromoteSearchWidgetDialogCompose.kt$@Suppress("LongMethod") @Composable fun PromoteSearchWidgetDialogCompose( onAddSearchWidgetButtonClick: () -&gt; Unit, onDismiss: () -&gt; Unit, )</ID>
    <ID>UndocumentedPublicFunction:RadioButtonPreference.kt$GroupableRadioButton$fun addToRadioGroup(radioButton: GroupableRadioButton)</ID>
    <ID>UndocumentedPublicFunction:RadioButtonPreference.kt$GroupableRadioButton$fun updateRadioValue(isChecked: Boolean)</ID>
    <ID>UndocumentedPublicFunction:RadioButtonPreference.kt$RadioButtonPreference$fun onClickListener(listener: (() -&gt; Unit))</ID>
    <ID>UndocumentedPublicFunction:RadioButtonPreference.kt$fun Iterable&lt;GroupableRadioButton&gt;.uncheckAll()</ID>
    <ID>UndocumentedPublicFunction:RemoveSearchEnginesSettingsFragment.kt$RemoveSearchEnginesSettingsFragment.Companion$fun newInstance()</ID>
    <ID>UndocumentedPublicFunction:SearchEngineListPreference.kt$SearchEngineListPreference$fun refetchSearchEngines()</ID>
    <ID>UndocumentedPublicFunction:SearchOverlay.kt$@OptIn(DelicateCoroutinesApi::class) @Composable fun SearchOverlay( viewModel: SearchSuggestionsViewModel, defaultSearchEngineName: String, onListScrolled: () -&gt; Unit, )</ID>
    <ID>UndocumentedPublicFunction:SearchSettingsFragment.kt$SearchSettingsFragment.Companion$fun newInstance(): SearchSettingsFragment</ID>
    <ID>UndocumentedPublicFunction:SearchSuggestionsFragment.kt$SearchSuggestionsFragment.Companion$fun create()</ID>
    <ID>UndocumentedPublicFunction:SearchSuggestionsPreferences.kt$SearchSuggestionsPreferences$fun disableSearchSuggestions()</ID>
    <ID>UndocumentedPublicFunction:SearchSuggestionsPreferences.kt$SearchSuggestionsPreferences$fun dismissNoSuggestionsMessage()</ID>
    <ID>UndocumentedPublicFunction:SearchSuggestionsPreferences.kt$SearchSuggestionsPreferences$fun enableSearchSuggestions()</ID>
    <ID>UndocumentedPublicFunction:SearchSuggestionsPreferences.kt$SearchSuggestionsPreferences$fun hasUserToggledSearchSuggestions(): Boolean</ID>
    <ID>UndocumentedPublicFunction:SearchSuggestionsPreferences.kt$SearchSuggestionsPreferences$fun searchSuggestionsEnabled(): Boolean</ID>
    <ID>UndocumentedPublicFunction:SearchSuggestionsPreferences.kt$SearchSuggestionsPreferences$fun userHasDismissedNoSuggestionsMessage(): Boolean</ID>
    <ID>UndocumentedPublicFunction:SearchSuggestionsViewModel.kt$SearchSuggestionsViewModel$fun clearAutocompleteSuggestion()</ID>
    <ID>UndocumentedPublicFunction:SearchSuggestionsViewModel.kt$SearchSuggestionsViewModel$fun clearSearchSuggestion()</ID>
    <ID>UndocumentedPublicFunction:SearchSuggestionsViewModel.kt$SearchSuggestionsViewModel$fun disableSearchSuggestions()</ID>
    <ID>UndocumentedPublicFunction:SearchSuggestionsViewModel.kt$SearchSuggestionsViewModel$fun dismissNoSuggestionsMessage()</ID>
    <ID>UndocumentedPublicFunction:SearchSuggestionsViewModel.kt$SearchSuggestionsViewModel$fun enableSearchSuggestions()</ID>
    <ID>UndocumentedPublicFunction:SearchSuggestionsViewModel.kt$SearchSuggestionsViewModel$fun refresh()</ID>
    <ID>UndocumentedPublicFunction:SearchSuggestionsViewModel.kt$SearchSuggestionsViewModel$fun selectSearchSuggestion( suggestion: String, defaultSearchEngineName: String, alwaysSearch: Boolean = false, )</ID>
    <ID>UndocumentedPublicFunction:SearchSuggestionsViewModel.kt$SearchSuggestionsViewModel$fun setAutocompleteSuggestion(text: String)</ID>
    <ID>UndocumentedPublicFunction:SearchSuggestionsViewModel.kt$SearchSuggestionsViewModel$fun setSearchQuery(query: String)</ID>
    <ID>UndocumentedPublicFunction:SearchUtils.kt$SearchUtils$fun createSearchUrl(context: Context?, text: String): String</ID>
    <ID>UndocumentedPublicFunction:SecretSettingsUnlocker.kt$SecretSettingsUnlocker$fun increment()</ID>
    <ID>UndocumentedPublicFunction:Settings.kt$Settings$fun addSearchWidgetInstalled(count: Int)</ID>
    <ID>UndocumentedPublicFunction:Settings.kt$Settings$fun createTrackingProtectionPolicy( shouldBlockCookiesValue: String = shouldBlockCookiesValue(), ): EngineSession.TrackingProtectionPolicy</ID>
    <ID>UndocumentedPublicFunction:Settings.kt$Settings$fun getAppLaunchCount()</ID>
    <ID>UndocumentedPublicFunction:Settings.kt$Settings$fun getClearBrowsingSessions()</ID>
    <ID>UndocumentedPublicFunction:Settings.kt$Settings$fun getCurrentCookieBannerOptionFromSharePref(): CookieBannerOption</ID>
    <ID>UndocumentedPublicFunction:Settings.kt$Settings$fun getHttpsOnlyMode(): Engine.HttpsOnlyMode</ID>
    <ID>UndocumentedPublicFunction:Settings.kt$Settings$fun getTotalBlockedTrackersCount()</ID>
    <ID>UndocumentedPublicFunction:Settings.kt$Settings$fun hasAdvertisingBlocked()</ID>
    <ID>UndocumentedPublicFunction:Settings.kt$Settings$fun hasAnalyticsBlocked()</ID>
    <ID>UndocumentedPublicFunction:Settings.kt$Settings$fun hasRequestedDesktop()</ID>
    <ID>UndocumentedPublicFunction:Settings.kt$Settings$fun hasSocialBlocked()</ID>
    <ID>UndocumentedPublicFunction:Settings.kt$Settings$fun saveCurrentCookieBannerOptionInSharePref( cookieBannerOption: CookieBannerOption, )</ID>
    <ID>UndocumentedPublicFunction:Settings.kt$Settings$fun setDefaultSearchEngineByName(name: String)</ID>
    <ID>UndocumentedPublicFunction:Settings.kt$Settings$fun setupSafeBrowsing(engine: Engine, shouldUseSafeBrowsing: Boolean = shouldUseSafeBrowsing())</ID>
    <ID>UndocumentedPublicFunction:Settings.kt$Settings$fun shouldAutocompleteFromCustomDomainList()</ID>
    <ID>UndocumentedPublicFunction:Settings.kt$Settings$fun shouldAutocompleteFromShippedDomainList()</ID>
    <ID>UndocumentedPublicFunction:Settings.kt$Settings$fun shouldBlockAdTrackers()</ID>
    <ID>UndocumentedPublicFunction:Settings.kt$Settings$fun shouldBlockAnalyticTrackers()</ID>
    <ID>UndocumentedPublicFunction:Settings.kt$Settings$fun shouldBlockCookiesValue(): String</ID>
    <ID>UndocumentedPublicFunction:Settings.kt$Settings$fun shouldBlockJavaScript(): Boolean</ID>
    <ID>UndocumentedPublicFunction:Settings.kt$Settings$fun shouldBlockOtherTrackers()</ID>
    <ID>UndocumentedPublicFunction:Settings.kt$Settings$fun shouldBlockSocialTrackers()</ID>
    <ID>UndocumentedPublicFunction:Settings.kt$Settings$fun shouldBlockWebFonts(): Boolean</ID>
    <ID>UndocumentedPublicFunction:Settings.kt$Settings$fun shouldEnableRemoteDebugging(): Boolean</ID>
    <ID>UndocumentedPublicFunction:Settings.kt$Settings$fun shouldShowSearchSuggestions(): Boolean</ID>
    <ID>UndocumentedPublicFunction:Settings.kt$Settings$fun shouldUseBiometrics(): Boolean</ID>
    <ID>UndocumentedPublicFunction:Settings.kt$Settings$fun shouldUseSecureMode(): Boolean</ID>
    <ID>UndocumentedPublicFunction:Settings.kt$Settings$fun userHasDismissedNoSuggestionsMessage(): Boolean</ID>
    <ID>UndocumentedPublicFunction:Settings.kt$Settings$fun userHasToggledSearchSuggestions(): Boolean</ID>
    <ID>UndocumentedPublicFunction:SettingsFragment.kt$SettingsFragment.Companion$fun newInstance(): SettingsFragment</ID>
    <ID>UndocumentedPublicFunction:SitePermissionOptionsFragment.kt$SitePermissionOptionsFragment.Companion$fun addSitePermission(sitePermission: SitePermission): SitePermissionOptionsFragment</ID>
    <ID>UndocumentedPublicFunction:SitePermissionOptionsStorage.kt$SitePermissionOptionsStorage$fun getSitePermissionLabel(sitePermission: SitePermission): String</ID>
    <ID>UndocumentedPublicFunction:SitePermissionOptionsStorage.kt$SitePermissionOptionsStorage$fun getSitePermissionsSettingsRules()</ID>
    <ID>UndocumentedPublicFunction:SitePermissionOptionsStorage.kt$SitePermissionOptionsStorage$fun isAndroidPermissionGranted(sitePermission: SitePermission): Boolean</ID>
    <ID>UndocumentedPublicFunction:SitePermissionOptionsStorage.kt$SitePermissionOptionsStorage$fun isSitePermissionNotBlocked(permissionsList: Array&lt;String&gt;): Boolean</ID>
    <ID>UndocumentedPublicFunction:StartupActivityLog.kt$StartupActivityLog$@VisibleForTesting(otherwise = NONE) fun getObserversForTesting()</ID>
    <ID>UndocumentedPublicFunction:StartupActivityLog.kt$StartupActivityLog$@VisibleForTesting(otherwise = PRIVATE) fun logEntries(loggerArg: Logger = logger, logLevel: Log.Priority = Log.logLevel)</ID>
    <ID>UndocumentedPublicFunction:StartupActivityLog.kt$StartupActivityLog$fun registerInAppOnCreate( application: Application, processLifecycleOwner: LifecycleOwner = ProcessLifecycleOwner.get(), )</ID>
    <ID>UndocumentedPublicFunction:StartupPathProvider.kt$StartupPathProvider$@VisibleForTesting(otherwise = NONE) fun getTestCallbacks()</ID>
    <ID>UndocumentedPublicFunction:StartupPathProvider.kt$StartupPathProvider$fun attachOnActivityOnCreate(lifecycle: Lifecycle, intent: Intent?)</ID>
    <ID>UndocumentedPublicFunction:StartupTypeTelemetry.kt$StartupTypeTelemetry$@VisibleForTesting(otherwise = NONE) fun getTestCallbacks()</ID>
    <ID>UndocumentedPublicFunction:StartupTypeTelemetry.kt$StartupTypeTelemetry$fun attachOnMainActivityOnCreate(lifecycle: Lifecycle)</ID>
    <ID>UndocumentedPublicFunction:StoreLink.kt$StoreLink$fun start()</ID>
    <ID>UndocumentedPublicFunction:StudiesViewHolder.kt$StudiesViewHolder.ActiveStudiesViewHolder$fun bindStudy( activeStudy: StudiesListItem.ActiveStudy, removeStudyListener: (StudiesListItem.ActiveStudy) -&gt; Unit, )</ID>
    <ID>UndocumentedPublicFunction:StudiesViewHolder.kt$StudiesViewHolder.SectionViewHolder$fun bindSection(section: StudiesListItem.Section)</ID>
    <ID>UndocumentedPublicFunction:StudiesViewModel.kt$StudiesViewModel$fun removeStudy(study: StudiesListItem.ActiveStudy)</ID>
    <ID>UndocumentedPublicFunction:StudiesViewModel.kt$StudiesViewModel$fun setStudiesState(state: Boolean)</ID>
    <ID>UndocumentedPublicFunction:SupportUtils.kt$SupportUtils$// For some reason this URL has a different format than the other SUMO URLs fun getSafeBrowsingURL(): String</ID>
    <ID>UndocumentedPublicFunction:SupportUtils.kt$SupportUtils$fun getGenericSumoURLForTopic(topic: SumoTopic): String</ID>
    <ID>UndocumentedPublicFunction:SupportUtils.kt$SupportUtils$fun getSumoURLForTopic(context: Context, topic: SumoTopic): String</ID>
    <ID>UndocumentedPublicFunction:SupportUtils.kt$SupportUtils$fun openDefaultBrowserSumoPage(context: Context)</ID>
    <ID>UndocumentedPublicFunction:SupportUtils.kt$SupportUtils$fun openUrlInCustomTab(activity: FragmentActivity, destinationUrl: String)</ID>
    <ID>UndocumentedPublicFunction:TabViewHolder.kt$TabViewHolder$fun bind( tab: TabSessionState, isCurrentSession: Boolean, selectSession: (TabSessionState) -&gt; Unit, closeSession: (TabSessionState) -&gt; Unit, )</ID>
    <ID>UndocumentedPublicFunction:TelemetryWrapper.kt$TelemetryWrapper$@JvmStatic @Suppress("LongMethod") fun init(context: Context)</ID>
    <ID>UndocumentedPublicFunction:TelemetryWrapper.kt$TelemetryWrapper$@JvmStatic fun addLoadToHistogram(url: String, newLoadTime: Long)</ID>
    <ID>UndocumentedPublicFunction:TelemetryWrapper.kt$TelemetryWrapper$@JvmStatic fun addSearchEngineLearnMoreEvent()</ID>
    <ID>UndocumentedPublicFunction:TelemetryWrapper.kt$TelemetryWrapper$@JvmStatic fun addToHomescreenShortcutEvent()</ID>
    <ID>UndocumentedPublicFunction:TelemetryWrapper.kt$TelemetryWrapper$@JvmStatic fun browseIntentEvent()</ID>
    <ID>UndocumentedPublicFunction:TelemetryWrapper.kt$TelemetryWrapper$@JvmStatic fun cancelAddToHomescreenShortcutEvent()</ID>
    <ID>UndocumentedPublicFunction:TelemetryWrapper.kt$TelemetryWrapper$@JvmStatic fun closeCustomTabEvent()</ID>
    <ID>UndocumentedPublicFunction:TelemetryWrapper.kt$TelemetryWrapper$@JvmStatic fun closeTabButtonTapped(crashSubmitted: Boolean)</ID>
    <ID>UndocumentedPublicFunction:TelemetryWrapper.kt$TelemetryWrapper$@JvmStatic fun closeTabsTrayEvent()</ID>
    <ID>UndocumentedPublicFunction:TelemetryWrapper.kt$TelemetryWrapper$@JvmStatic fun copyImageEvent()</ID>
    <ID>UndocumentedPublicFunction:TelemetryWrapper.kt$TelemetryWrapper$@JvmStatic fun copyLinkEvent()</ID>
    <ID>UndocumentedPublicFunction:TelemetryWrapper.kt$TelemetryWrapper$@JvmStatic fun crashReporterOpened()</ID>
    <ID>UndocumentedPublicFunction:TelemetryWrapper.kt$TelemetryWrapper$@JvmStatic fun customTabActionButtonEvent()</ID>
    <ID>UndocumentedPublicFunction:TelemetryWrapper.kt$TelemetryWrapper$@JvmStatic fun customTabMenuEvent()</ID>
    <ID>UndocumentedPublicFunction:TelemetryWrapper.kt$TelemetryWrapper$@JvmStatic fun dayPassedSinceLastUpload(context: Context): Boolean</ID>
    <ID>UndocumentedPublicFunction:TelemetryWrapper.kt$TelemetryWrapper$@JvmStatic fun desktopRequestCheckEvent(shouldRequestDesktop: Boolean)</ID>
    <ID>UndocumentedPublicFunction:TelemetryWrapper.kt$TelemetryWrapper$@JvmStatic fun downloadDialogDownloadEvent(sentToDownload: Boolean)</ID>
    <ID>UndocumentedPublicFunction:TelemetryWrapper.kt$TelemetryWrapper$@JvmStatic fun eraseAndOpenNotificationActionEvent()</ID>
    <ID>UndocumentedPublicFunction:TelemetryWrapper.kt$TelemetryWrapper$@JvmStatic fun eraseAndOpenShortcutEvent()</ID>
    <ID>UndocumentedPublicFunction:TelemetryWrapper.kt$TelemetryWrapper$@JvmStatic fun eraseBackToAppEvent()</ID>
    <ID>UndocumentedPublicFunction:TelemetryWrapper.kt$TelemetryWrapper$@JvmStatic fun eraseBackToHomeEvent()</ID>
    <ID>UndocumentedPublicFunction:TelemetryWrapper.kt$TelemetryWrapper$@JvmStatic fun eraseEvent()</ID>
    <ID>UndocumentedPublicFunction:TelemetryWrapper.kt$TelemetryWrapper$@JvmStatic fun eraseNotificationEvent()</ID>
    <ID>UndocumentedPublicFunction:TelemetryWrapper.kt$TelemetryWrapper$@JvmStatic fun eraseShortcutEvent()</ID>
    <ID>UndocumentedPublicFunction:TelemetryWrapper.kt$TelemetryWrapper$@JvmStatic fun eraseTaskRemoved()</ID>
    <ID>UndocumentedPublicFunction:TelemetryWrapper.kt$TelemetryWrapper$@JvmStatic fun findInPageMenuEvent()</ID>
    <ID>UndocumentedPublicFunction:TelemetryWrapper.kt$TelemetryWrapper$@JvmStatic fun finishFirstRunEvent()</ID>
    <ID>UndocumentedPublicFunction:TelemetryWrapper.kt$TelemetryWrapper$@JvmStatic fun installFirefoxEvent()</ID>
    <ID>UndocumentedPublicFunction:TelemetryWrapper.kt$TelemetryWrapper$@JvmStatic fun isTelemetryEnabled(context: Context): Boolean</ID>
    <ID>UndocumentedPublicFunction:TelemetryWrapper.kt$TelemetryWrapper$@JvmStatic fun makeDefaultBrowserSettings()</ID>
    <ID>UndocumentedPublicFunction:TelemetryWrapper.kt$TelemetryWrapper$@JvmStatic fun menuAddSearchEngineEvent()</ID>
    <ID>UndocumentedPublicFunction:TelemetryWrapper.kt$TelemetryWrapper$@JvmStatic fun menuReloadEvent()</ID>
    <ID>UndocumentedPublicFunction:TelemetryWrapper.kt$TelemetryWrapper$@JvmStatic fun menuRemoveEnginesEvent()</ID>
    <ID>UndocumentedPublicFunction:TelemetryWrapper.kt$TelemetryWrapper$@JvmStatic fun menuRestoreEnginesEvent()</ID>
    <ID>UndocumentedPublicFunction:TelemetryWrapper.kt$TelemetryWrapper$@JvmStatic fun openExceptionsListSetting()</ID>
    <ID>UndocumentedPublicFunction:TelemetryWrapper.kt$TelemetryWrapper$@JvmStatic fun openFirefoxEvent()</ID>
    <ID>UndocumentedPublicFunction:TelemetryWrapper.kt$TelemetryWrapper$@JvmStatic fun openFromIconEvent()</ID>
    <ID>UndocumentedPublicFunction:TelemetryWrapper.kt$TelemetryWrapper$@JvmStatic fun openHomescreenShortcutEvent()</ID>
    <ID>UndocumentedPublicFunction:TelemetryWrapper.kt$TelemetryWrapper$@JvmStatic fun openLinkInFullBrowserFromCustomTabEvent()</ID>
    <ID>UndocumentedPublicFunction:TelemetryWrapper.kt$TelemetryWrapper$@JvmStatic fun openLinkInNewTabEvent()</ID>
    <ID>UndocumentedPublicFunction:TelemetryWrapper.kt$TelemetryWrapper$@JvmStatic fun openNotificationActionEvent()</ID>
    <ID>UndocumentedPublicFunction:TelemetryWrapper.kt$TelemetryWrapper$@JvmStatic fun openSearchSettingsEvent()</ID>
    <ID>UndocumentedPublicFunction:TelemetryWrapper.kt$TelemetryWrapper$@JvmStatic fun openSelectionEvent()</ID>
    <ID>UndocumentedPublicFunction:TelemetryWrapper.kt$TelemetryWrapper$@JvmStatic fun openTabsTrayEvent()</ID>
    <ID>UndocumentedPublicFunction:TelemetryWrapper.kt$TelemetryWrapper$@JvmStatic fun openWhatsNewEvent(highlighted: Boolean)</ID>
    <ID>UndocumentedPublicFunction:TelemetryWrapper.kt$TelemetryWrapper$@JvmStatic fun removeSearchEnginesEvent(selected: Int)</ID>
    <ID>UndocumentedPublicFunction:TelemetryWrapper.kt$TelemetryWrapper$@JvmStatic fun reportSiteIssueEvent()</ID>
    <ID>UndocumentedPublicFunction:TelemetryWrapper.kt$TelemetryWrapper$@JvmStatic fun respondToSearchSuggestionPrompt(enable: Boolean)</ID>
    <ID>UndocumentedPublicFunction:TelemetryWrapper.kt$TelemetryWrapper$@JvmStatic fun resumeFromIconEvent()</ID>
    <ID>UndocumentedPublicFunction:TelemetryWrapper.kt$TelemetryWrapper$@JvmStatic fun saveCustomSearchEngineEvent(success: Boolean)</ID>
    <ID>UndocumentedPublicFunction:TelemetryWrapper.kt$TelemetryWrapper$@JvmStatic fun saveImageEvent()</ID>
    <ID>UndocumentedPublicFunction:TelemetryWrapper.kt$TelemetryWrapper$@JvmStatic fun setDefaultSearchEngineEvent(source: String)</ID>
    <ID>UndocumentedPublicFunction:TelemetryWrapper.kt$TelemetryWrapper$@JvmStatic fun settingsEvent(key: String, value: String)</ID>
    <ID>UndocumentedPublicFunction:TelemetryWrapper.kt$TelemetryWrapper$@JvmStatic fun shareEvent()</ID>
    <ID>UndocumentedPublicFunction:TelemetryWrapper.kt$TelemetryWrapper$@JvmStatic fun shareImageEvent()</ID>
    <ID>UndocumentedPublicFunction:TelemetryWrapper.kt$TelemetryWrapper$@JvmStatic fun shareIntentEvent(isSearch: Boolean)</ID>
    <ID>UndocumentedPublicFunction:TelemetryWrapper.kt$TelemetryWrapper$@JvmStatic fun shareLinkEvent()</ID>
    <ID>UndocumentedPublicFunction:TelemetryWrapper.kt$TelemetryWrapper$@JvmStatic fun showFirstRunPageEvent(page: Int)</ID>
    <ID>UndocumentedPublicFunction:TelemetryWrapper.kt$TelemetryWrapper$@JvmStatic fun skipFirstRunEvent()</ID>
    <ID>UndocumentedPublicFunction:TelemetryWrapper.kt$TelemetryWrapper$@JvmStatic fun startSession()</ID>
    <ID>UndocumentedPublicFunction:TelemetryWrapper.kt$TelemetryWrapper$@JvmStatic fun stopMainActivity()</ID>
    <ID>UndocumentedPublicFunction:TelemetryWrapper.kt$TelemetryWrapper$@JvmStatic fun stopSession()</ID>
    <ID>UndocumentedPublicFunction:TelemetryWrapper.kt$TelemetryWrapper$@JvmStatic fun textSelectionIntentEvent()</ID>
    <ID>UndocumentedPublicFunction:TelemetryWrapper.kt$TelemetryWrapper$@JvmStatic fun urlBarEvent(isUrl: Boolean)</ID>
    <ID>UndocumentedPublicFunction:TelemetryWrapper.kt$TelemetryWrapper$fun removeAllExceptionDomains(count: Int)</ID>
    <ID>UndocumentedPublicFunction:TelemetryWrapper.kt$TelemetryWrapper$fun removeAutocompleteDomainsEvent(count: Int)</ID>
    <ID>UndocumentedPublicFunction:TelemetryWrapper.kt$TelemetryWrapper$fun removeExceptionDomains(count: Int)</ID>
    <ID>UndocumentedPublicFunction:TelemetryWrapper.kt$TelemetryWrapper$fun reorderAutocompleteDomainEvent(from: Int, to: Int)</ID>
    <ID>UndocumentedPublicFunction:TelemetryWrapper.kt$TelemetryWrapper$fun saveAutocompleteDomainEvent(eventSource: AutoCompleteEventSource)</ID>
    <ID>UndocumentedPublicFunction:TelemetryWrapper.kt$TelemetryWrapper$fun searchEnterEvent()</ID>
    <ID>UndocumentedPublicFunction:TelemetryWrapper.kt$TelemetryWrapper$fun searchSelectEvent(isSearchSuggestion: Boolean)</ID>
    <ID>UndocumentedPublicFunction:Theme.kt$fun Resources.Theme.resolveAttribute(attribute: Int): Int</ID>
    <ID>UndocumentedPublicFunction:TopSitesOverlay.kt$@OptIn(DelicateCoroutinesApi::class) @Composable fun TopSitesOverlay(modifier: Modifier = Modifier)</ID>
    <ID>UndocumentedPublicFunction:TopSitesOverlay.kt$@OptIn(DelicateCoroutinesApi::class) fun removeTopSite(item: TopSite, components: Components)</ID>
    <ID>UndocumentedPublicFunction:TopSitesOverlay.kt$@OptIn(DelicateCoroutinesApi::class) fun renameTopSite(selectedTopSite: TopSite, newTitle: String, components: Components)</ID>
    <ID>UndocumentedPublicFunction:TransitionDrawableGroup.kt$TransitionDrawableGroup$fun resetTransition()</ID>
    <ID>UndocumentedPublicFunction:TransitionDrawableGroup.kt$TransitionDrawableGroup$fun startTransition(durationMillis: Int)</ID>
    <ID>UndocumentedPublicFunction:UrlInputFragment.kt$UrlInputFragment$fun onBackPressed(): Boolean</ID>
    <ID>UndocumentedPublicFunction:UrlInputFragment.kt$UrlInputFragment.Companion$@JvmStatic fun createWithTab( tabId: String, ): UrlInputFragment</ID>
    <ID>UndocumentedPublicFunction:UrlInputFragment.kt$UrlInputFragment.Companion$@JvmStatic fun createWithoutSession(): UrlInputFragment</ID>
    <ID>UndocumentedPublicFunction:ViewUtils.kt$ViewUtils$fun hideKeyboard(view: View?)</ID>
    <ID>UndocumentedPublicFunction:ViewUtils.kt$ViewUtils$fun showKeyboard(view: View?)</ID>
    <ID>UndocumentedPublicFunction:VisibilityLifeCycleCallback.kt$VisibilityLifeCycleCallback.Companion$fun isInBackground(context: Context): Boolean</ID>
    <ID>UndocumentedPublicFunction:WhatsNewStorage.kt$WhatsNewStorage$fun getSessionCounter(): Int</ID>
    <ID>UndocumentedPublicFunction:WhatsNewStorage.kt$WhatsNewStorage$fun getVersion(): WhatsNewVersion?</ID>
    <ID>UndocumentedPublicFunction:WhatsNewStorage.kt$WhatsNewStorage$fun setSessionCounter(sessionCount: Int)</ID>
    <ID>UndocumentedPublicFunction:WhatsNewStorage.kt$WhatsNewStorage$fun setVersion(version: WhatsNewVersion)</ID>
    <ID>UnusedPrivateMember:DownloadRobot.kt$private val downloadNotificationText = getStringResource(R.string.mozac_feature_downloads_completed_notification_text2)</ID>
    <ID>UnusedPrivateMember:ExternalIntentNavigationTest.kt$ShadowPerformance$bundle: Bundle?</ID>
    <ID>UnusedPrivateMember:ExternalIntentNavigationTest.kt$ShadowPerformance$context: Context</ID>
    <ID>UnusedPrivateMember:SettingsGeneralMenuRobot.kt$private val openWithDialogTitle = mDevice.findObject( UiSelector() .text("Open with"), )</ID>
    <ID>UnusedPrivateMember:SettingsGeneralMenuRobot.kt$private val openWithList = mDevice.findObject( UiSelector() .resourceId("android:id/resolver_list"), )</ID>
    <ID>UnusedPrivateMember:TelemetryMiddleware.kt$TelemetryMiddleware$ @Suppress("ComplexMethod") private fun generateOptions(customTabConfig: CustomTabConfig): List&lt;String&gt;</ID>
    <ID>UnusedPrivateMember:WhatsNewTest.kt$WhatsNewTest$i</ID>
    <ID>UtilityClassWithPublicConstructor:AppReviewUtils.kt$AppReviewUtils</ID>
    <ID>UtilityClassWithPublicConstructor:IconGenerator.kt$IconGenerator</ID>
  </CurrentIssues>
</SmellBaseline>
