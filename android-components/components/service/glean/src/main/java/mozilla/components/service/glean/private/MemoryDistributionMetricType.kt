/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

package mozilla.components.service.glean.private

import androidx.annotation.VisibleForTesting
import mozilla.components.service.glean.Dispatchers
import mozilla.components.service.glean.histogram.FunctionalHistogram
import mozilla.components.service.glean.storages.MemoryDistributionsStorageEngine
import mozilla.components.support.base.log.logger.Logger

/**
 * This implements the developer facing API for recording memory distribution metrics.
 *
 * To prevent the number of buckets from being unbounded, values larger than 1 TB
 * are truncated to 1 TB.
 *
 * Instances of this class type are automatically generated by the parsers at build time,
 * allowing developers to record values that were previously registered in the metrics.yaml file.
 */
data class MemoryDistributionMetricType(
    override val disabled: Boolean,
    override val category: String,
    override val lifetime: Lifetime,
    override val name: String,
    override val sendInPings: List<String>,
    val memoryUnit: MemoryUnit
) : CommonMetricData, HistogramMetricBase {

    private val logger = Logger("glean/MemoryDistributionMetricType")

    /**
     * Record a single value, in the unit specified by `memoryUnit`, to the distribution.
     *
     * @param sample the value
     */
    fun accumulate(sample: Long) {
        if (!shouldRecord(logger)) {
            return
        }

        @Suppress("EXPERIMENTAL_API_USAGE")
        Dispatchers.API.launch {
            // Delegate storing the value to the storage engine.
            MemoryDistributionsStorageEngine.accumulate(
                metricData = this@MemoryDistributionMetricType,
                sample = sample,
                memoryUnit = memoryUnit
            )
        }
    }

    /**
     * Accumulates the provided samples, in the unit specified by `memoryUnit`,
     * to the distribution.
     *
     * This function is intended for GeckoView use only.
     *
     * @param samples the [LongArray] holding the samples to be recorded by the metric.
     */
    override fun accumulateSamples(samples: LongArray) {
        if (!shouldRecord(logger)) {
            return
        }

        @Suppress("EXPERIMENTAL_API_USAGE")
        Dispatchers.API.launch {
            MemoryDistributionsStorageEngine.accumulateSamples(
                metricData = this@MemoryDistributionMetricType,
                samples = samples,
                memoryUnit = memoryUnit
            )
        }
    }

    /**
     * Tests whether a value is stored for the metric for testing purposes only. This function will
     * attempt to await the last task (if any) writing to the the metric's storage engine before
     * returning a value.
     *
     * @param pingName represents the name of the ping to retrieve the metric for.  Defaults
     *                 to the either the first value in [defaultStorageDestinations] or the first
     *                 value in [sendInPings]
     * @return true if metric value exists, otherwise false
     */
    @VisibleForTesting(otherwise = VisibleForTesting.NONE)
    @JvmOverloads
    fun testHasValue(pingName: String = sendInPings.first()): Boolean {
        @Suppress("EXPERIMENTAL_API_USAGE")
        Dispatchers.API.assertInTestingMode()

        return MemoryDistributionsStorageEngine.getSnapshot(pingName, false)?.get(identifier) != null
    }

    /**
     * Returns the stored value for testing purposes only. This function will attempt to await the
     * last task (if any) writing to the the metric's storage engine before returning a value.
     *
     * @param pingName represents the name of the ping to retrieve the metric for.  Defaults
     *                 to the either the first value in [defaultStorageDestinations] or the first
     *                 value in [sendInPings]
     * @return value of the stored metric
     * @throws [NullPointerException] if no value is stored
     */
    @VisibleForTesting(otherwise = VisibleForTesting.NONE)
    @JvmOverloads
    fun testGetValue(pingName: String = sendInPings.first()): FunctionalHistogram {
        @Suppress("EXPERIMENTAL_API_USAGE")
        Dispatchers.API.assertInTestingMode()

        return MemoryDistributionsStorageEngine.getSnapshot(pingName, false)!![identifier]!!
    }
}
